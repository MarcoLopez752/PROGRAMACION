#include "stdafx.h"
#include <iostream>
#include "conio.h"
#include <string>

using namespace std;

void programar();
void variables();
void CursoOperadores();
void CursoBucle();
void Funcion();
void arreglos();
void Strings();
void Matrices();




void PracticaVariables();
void PracticaOperadores();
void PracticaBuclues();
void PracticaArreglos();
void PracticaFuncion();
void PracticaMatriz();
void PracticaString();

void main()
{
	int opcion, i, opcion2, opcion3, opcion4, opcion5;
	string nombre;
	string pass;
	string usuario;
	string contraseña;

	cout << " ______________________________________________________________________________________                               " << endl;
	cout << "|   _______    _______   _______   __    ___  _______   ___      __   ___ _ _          |                            " << endl;
	cout << "|  |  _____|  |  _____| |  _____| |  |  /  / |   ____| |   -    |  | |     _ _         |                        " << endl;
	cout << "|  | |        |  |      |  |      |  | /  /  |  |      |    -   |  | | |     _ _       |                    " << endl;
	cout << "|  | | _____  |  |__    |  |__    |   /  /   |  |__    |     -  |  | | |       _ _     |                     " << endl;
	cout << "|  | | |__ |  |   __|   |   __|   |     /    |   __|   |  |-  - |  | | |       _ _     |                    " << endl;
	cout << "|  | |   | |  |  |      |  |      |  |- -    |  |      |  |  - -|  | | |      _ _      |                  " << endl;
	cout << "|  | |___| |  |  |____  |  |____  |  | - -   |  |____  |  |  -     | | |__  _ _        |                 " << endl;
	cout << "|  |_______|  |_______| |_______| |__| |__|  |_______| |__|   -____| |___ _ _          |             " << endl;
	cout << "|                                                                                      |" << endl;
	cout << "|                                                                                      |" << endl;
	cout << "|                               <<<<<BIENVENIDOS A GEEKEND>>>>>                        |" << endl;
	cout << "|                         <<<<<TU PLATAFORMA PARA APRENDER PROGRAMAR>>>>>              |" << endl;
	cout << "|                                                                                      |" << endl;



	do {										//LOGIN//
		cout << "|______________________________________________________________________________________|" << endl;
		cout << "|                               -----Login------				       |" << endl;
		cout << "|                               1. Crear usuario				       |" << endl;
		cout << "|                               2. Preguntas					       |" << endl;
		cout << "|                               3. Ingresar					       |" << endl;
		cout << "|                               Digite una opcion:				       |" << endl;
		cout << "|______________________________________________________________________________________|" << endl;
		cin >> opcion;
		system("cls");

		switch (opcion)
		{
		case 1: {cout << "Por favor ingrese su nombre de usuario" << endl;
			cin >> usuario;
			cout << "Porfavor ingrese su contraseña" << endl;
			cin >> contraseña;
			cout << "Ingrese 3 seguidamente para poder ingresar" << endl;
			system("pause>null");
			break; }
		case 2: {system("cls");
			cout << "Quines somos?" << endl;
			cout << "Somos la solucion para todas esas personas que buscan aprender a programar de manera facil y rapido. Somos Geekend, la plataforma digital que te enseña C++ para que puedas emprender y lograr tus proyectos personal." << endl;
			cout << "Por que hacemos esto?" << endl;
			cout << "Estamos convocados a ayudar y compartir el conocimiento asi como informar a la poblacion sobre el mundo digital mas especifico en programar." << endl;
			cout << "Para quienes va dirigido el proyecto" << endl;
			cout << "Para cualquier adulto,joven o nino con las ganas de aprender y superarse." << endl;

			system("pause>null");
			system("cls");
			break; }

				system("cls");
		}
	} while (opcion != 3);

	//REGISTRO DEL LOGIN//
	for (i = 1; i < 4; i++)
	{
		system("cls");
		cout << endl;
		cout << "        BIENVENIDO AL SISTEMA DE LOGIN    " << endl;
		cout << "___________________________________________" << endl;
		cout << endl;
		cout << "Por favor ingrese su informacion de usuario" << endl;
		cout << endl;
		cout << "¿Nombre de usuario?" << endl;
		cin >> nombre;
		if (nombre == usuario) {
			cout << "Nombre de usuario correcto, por favor ingrese su contrasena:" << endl;
			cin >> pass;
			if (pass == contraseña) {
				cout << endl;
				cout << "Contrasena correcta, bienvenido, sera redirigido a la aplicacion" << endl;
				system("pause>null");
				break;

			}
			else
				if (pass != contraseña) {
					cout << "Contrasena incorrecta, por favor ingrese un usuario y contrasena valida" << endl;
					system("pause>null");
				}
		}
		else
			if (nombre != usuario) {
				cout << "Nombre de usuario incorrecto, por favor ingrese su nombre de usuario nuevamente" << endl;
				system("pause>null");
			}

		if (i > 0) {
			cout << endl;
			cout << "Ha realizado " << i << "/3 intentos" << endl;
			cout << endl;
			system("pause>null");
		}
		if (i == 3) {
			cout << endl;
			cout << "Ha realizado 3 intentos, por seguridad el programa se cerrara..." << endl;
			system("pause>null");
			exit(0);
		}
	}
	system("cls");

	do {							//Comienzo del programa Menu//
		cout << "                     <<<<<<MENU>>>>>            " << endl;
		cout << "1. Cursos" << endl;
		cout << "2. Practicas" << endl;
		cout << "3. Ejercicios " << endl;
		cout << "4. Videos" << endl;
		cout << "5. Soporte " << endl;
		cout << "0.Salir" << endl;
		cout << "Ingrese una opcion" << endl;
		cin >> opcion2;
		system("cls");
		switch (opcion2)
		{
		case 1:				//CURSOS DE C++//
		{
			do {
				cout << "                Bienvenidos al apartado de cursos en C++            " << endl;
				cout << "Temas: " << endl;
				cout << " 1. Introduccion a la programacion" << endl;
				cout << " 2. Variables" << endl;
				cout << " 3. Operadores " << endl;
				cout << " 4. Bucles" << endl;
				cout << " 5. Funciones" << endl;
				cout << " 6. Arreglos " << endl;
				cout << " 7. Clase String " << endl;
				cout << " 8. Matrices " << endl;
				cout << " 0. Salir " << endl;

				cout << "Proximamente el curso completo ._." << endl;
				cout << "Ingrese una opcion: " << endl;

				cin >> opcion3;
				system("cls");
				switch (opcion3)
				{
				case 1:
				{programar();
				break; }
				case 2:
				{variables();
				break; }
				case 3:
				{CursoOperadores();
				break; }
				case 4:
				{CursoBucle();
				break; }
				case 5:
				{Funcion();
				break; }
				case 6:
				{arreglos();
				break; }
				case 7:
				{Strings();
				break; }
				case 8:
				{Matrices();
				break; }

				}
			} while (opcion3 != 0);





			break;
		}
		case 2:           //PRACTICA C++//
		{	do {
			cout << "                Bienvenidos al apartado de practicas en C++            " << endl;
			cout << "Temas: " << endl;
			cout << " 1. Introduccion a la programacion" << endl;
			cout << " 2. Variables" << endl;
			cout << " 3. Operadores " << endl;
			cout << " 4. Bucles" << endl;
			cout << " 5. Funciones" << endl;
			cout << " 6. Arreglos " << endl;
			cout << " 7. Clase String " << endl;
			cout << " 8. Matrices " << endl;
			cout << " 0. Salir " << endl;


			cout << "Ingrese una opcion: " << endl;

			cin >> opcion4;
			system("cls");
			switch (opcion4)
			{
			case 1:
			{PracticaVariables();
			break; }
			case 2:
			{PracticaVariables();
			break; }
			case 3:
			{PracticaOperadores();
			break; }
			case 4:
			{PracticaBuclues();
			break; }
			case 5:
			{PracticaFuncion();
			break; }
			case 6:
			{PracticaArreglos();
			break; }
			case 7:
			{PracticaString();
			break; }
			case 8:
			{PracticaMatriz();
			break; }

			}
		} while (opcion4 != 0);

		break;
		}
		case 3:
		{
			cout << "Ejercicios terminados para analizar y aprender mucho mas" << endl;
			cout << "Te invitamos a visitar nuestro portafolios en Github" << endl;
			cout << "Aqui el link: https://github.com/GeekendINC/Cursos-Geekend/tree/master";
			system("pause>null");
			system("cls");
			break;
		}
		case 4:
		{
			do {
				cout << "                Bienvenidos al apartado de practicas en C++            " << endl;
				cout << "Temas: " << endl;
				cout << " 1. Introduccion a la programacion" << endl;
				cout << " 2. Variables" << endl;
				cout << " 3. Operadores " << endl;
				cout << " 4. Bucles" << endl;
				cout << " 5. Funciones" << endl;
				cout << " 6. Arreglos " << endl;
				cout << " 7. Clase String " << endl;
				cout << " 8. Matrices " << endl;
				cout << " 0. Salir " << endl;

				cout << "En cada seccion encontraras links que te ayudaran" << endl;
				cout << "Ingrese una opcion: " << endl;

				cin >> opcion5;
				system("cls");
				switch (opcion5)
				{
				case 1:
				{cout << "https://www.youtube.com/watch?v=ld4nzao5XAc" << endl;
				system("pause>null");
				system("cls");
				break; }

				case 2:
				{cout << "https://www.youtube.com/watch?v=xBOpQN8jR54" << endl;
				cout << "https://www.youtube.com/watch?v=1iQUZEklWio" << endl;
				system("pause>null");
				system("cls");
				break; }

				case 3:
				{cout << "https://www.youtube.com/watch?v=rpZVq8LRb0U&index=5&list=PLWtYZ2ejMVJlUu1rEHLC0i_oibctkl0Vh" << endl;
				cout << "https://www.youtube.com/watch?v=zqmN2aO4c7o&index=7&list=PLWtYZ2ejMVJlUu1rEHLC0i_oibctkl0Vh" << endl;
				cout << "https://www.youtube.com/watch?v=eHTa-3LEk8I&index=8&list=PLWtYZ2ejMVJlUu1rEHLC0i_oibctkl0Vh" << endl;
				cout << "https://www.youtube.com/watch?v=vrXZ22sVIFQ&list=PLWtYZ2ejMVJlUu1rEHLC0i_oibctkl0Vh&index=9" << endl;
				cout << "https://www.youtube.com/watch?v=1ge8X-1Tyfo&index=10&list=PLWtYZ2ejMVJlUu1rEHLC0i_oibctkl0Vh" << endl;
				cout << "https://www.youtube.com/watch?v=qnUzOVSf_g4&index=11&list=PLWtYZ2ejMVJlUu1rEHLC0i_oibctkl0Vh" << endl;
				system("pause>null");
				system("cls");
				break; }

				case 4:
				{cout << "https://www.youtube.com/watch?v=r5GbMsB0eOA&index=12&list=PLWtYZ2ejMVJlUu1rEHLC0i_oibctkl0Vh" << endl;
				cout << "https://www.youtube.com/watch?v=hjDB7ev9ePM&index=13&list=PLWtYZ2ejMVJlUu1rEHLC0i_oibctkl0Vh" << endl;
				cout << "https://www.youtube.com/watch?v=V_fdETm_QMI&index=14&list=PLWtYZ2ejMVJlUu1rEHLC0i_oibctkl0Vh" << endl;
				cout << "https://www.youtube.com/watch?v=kjixSMConhs&index=15&list=PLWtYZ2ejMVJlUu1rEHLC0i_oibctkl0Vh" << endl;
				cout << "https://www.youtube.com/watch?v=18zUlAcjYB8&index=16&list=PLWtYZ2ejMVJlUu1rEHLC0i_oibctkl0Vh" << endl;
				cout << "https://www.youtube.com/watch?v=tn67rumRqa0&list=PLWtYZ2ejMVJlUu1rEHLC0i_oibctkl0Vh&index=17" << endl;
				cout << "https://www.youtube.com/watch?v=ZnGJxsTYudU&list=PLWtYZ2ejMVJlUu1rEHLC0i_oibctkl0Vh&index=18" << endl;
				cout << "https://www.youtube.com/watch?v=DTmMjJ-cd00&index=20&list=PLWtYZ2ejMVJlUu1rEHLC0i_oibctkl0Vh" << endl;
				cout << "https://www.youtube.com/watch?v=vHKWMR2WaIQ&list=PLWtYZ2ejMVJlUu1rEHLC0i_oibctkl0Vh&index=21" << endl;
				cout << "https://www.youtube.com/watch?v=_6AdtcVn4xs&list=PLWtYZ2ejMVJlUu1rEHLC0i_oibctkl0Vh&index=22" << endl;
				cout << "https://www.youtube.com/watch?v=yNWuEDd8iQs&index=27&list=PLWtYZ2ejMVJlUu1rEHLC0i_oibctkl0Vh" << endl;
				cout << "https://www.youtube.com/watch?v=P4JLJd2wIKk&list=PLWtYZ2ejMVJlUu1rEHLC0i_oibctkl0Vh&index=29" << endl;
				cout << "https://www.youtube.com/watch?v=12xEUfqiO0M&index=30&list=PLWtYZ2ejMVJlUu1rEHLC0i_oibctkl0Vh" << endl;
				system("pause>null");
				system("cls");
				break; }

				case 5:
				{cout << "https://www.youtube.com/watch?v=vLZymLKd6Mo&index=64&list=PLWtYZ2ejMVJlUu1rEHLC0i_oibctkl0Vh" << endl;
				cout << "https://www.youtube.com/watch?v=C1C14J0M4d4&list=PLWtYZ2ejMVJlUu1rEHLC0i_oibctkl0Vh&index=65" << endl;
				cout << "https://www.youtube.com/watch?v=BRtwiARFUmQ&index=66&list=PLWtYZ2ejMVJlUu1rEHLC0i_oibctkl0Vh" << endl;
				cout << "https://www.youtube.com/watch?v=reTFGNr4elw&index=67&list=PLWtYZ2ejMVJlUu1rEHLC0i_oibctkl0Vh" << endl;
				cout << "https://www.youtube.com/watch?v=XNXdytXmYVM&list=PLWtYZ2ejMVJlUu1rEHLC0i_oibctkl0Vh&index=69" << endl;
				cout << "https://www.youtube.com/watch?v=DRP3ApEf9LM&index=70&list=PLWtYZ2ejMVJlUu1rEHLC0i_oibctkl0Vh" << endl;
				cout << "https://www.youtube.com/watch?v=TwdVkyM2AHE&list=PLWtYZ2ejMVJlUu1rEHLC0i_oibctkl0Vh&index=73" << endl;
				cout << "https://www.youtube.com/watch?v=wYEa0z97yGE&index=76&list=PLWtYZ2ejMVJlUu1rEHLC0i_oibctkl0Vh" << endl;
				cout << "https://www.youtube.com/watch?v=i9roxX8z7tk&index=80&list=PLWtYZ2ejMVJlUu1rEHLC0i_oibctkl0Vh" << endl;
				system("pause>null");
				system("cls");
				break; }

				case 6:
				{cout << "https://www.youtube.com/watch?v=l-kOjxvgyDQ&list=PLWtYZ2ejMVJlUu1rEHLC0i_oibctkl0Vh&index=31" << endl;
				cout << "https://www.youtube.com/watch?v=_JmyF2JPqwk&index=32&list=PLWtYZ2ejMVJlUu1rEHLC0i_oibctkl0Vh" << endl;
				cout << "https://www.youtube.com/watch?v=R12v-66sKJY&list=PLWtYZ2ejMVJlUu1rEHLC0i_oibctkl0Vh&index=33" << endl;
				cout << "https://www.youtube.com/watch?v=APjGtdNqAbk&index=34&list=PLWtYZ2ejMVJlUu1rEHLC0i_oibctkl0Vh" << endl;
				cout << "https://www.youtube.com/watch?v=6t9BRH8NCGQ&index=35&list=PLWtYZ2ejMVJlUu1rEHLC0i_oibctkl0Vh" << endl;
				system("pause>null");
				system("cls");
				break; }

				case 7:
				{cout << "https://www.youtube.com/watch?v=D7hbaJhgzBs&index=41&list=PLWtYZ2ejMVJlUu1rEHLC0i_oibctkl0Vh" << endl;
				cout << "https://www.youtube.com/watch?v=6ruPSK_JZPo&index=42&list=PLWtYZ2ejMVJlUu1rEHLC0i_oibctkl0Vh" << endl;
				cout << "https://www.youtube.com/watch?v=gOeMQRNMucA&index=43&list=PLWtYZ2ejMVJlUu1rEHLC0i_oibctkl0Vh" << endl;
				cout << "https://www.youtube.com/watch?v=4GXSXCVHCJ4&list=PLWtYZ2ejMVJlUu1rEHLC0i_oibctkl0Vh&index=44" << endl;
				cout << "https://www.youtube.com/watch?v=HRDUi7_WsYM&index=45&list=PLWtYZ2ejMVJlUu1rEHLC0i_oibctkl0Vh" << endl;
				cout << "https://www.youtube.com/watch?v=CuQzFZGqTP8&list=PLWtYZ2ejMVJlUu1rEHLC0i_oibctkl0Vh&index=50" << endl;
				cout << "https://www.youtube.com/watch?v=Pw_1YVc8Myw&list=PLWtYZ2ejMVJlUu1rEHLC0i_oibctkl0Vh&index=48" << endl;
				system("pause>null");
				system("cls");
				break; }


				case 8:
				{cout << "https://www.youtube.com/watch?v=7LMAZimcgZ8&index=36&list=PLWtYZ2ejMVJlUu1rEHLC0i_oibctkl0Vh" << endl;
				cout << "https://www.youtube.com/watch?v=yVL1gViXq6w&index=37&list=PLWtYZ2ejMVJlUu1rEHLC0i_oibctkl0Vh" << endl;
				cout << "https://www.youtube.com/watch?v=qDBZ0S3hcbY&index=38&list=PLWtYZ2ejMVJlUu1rEHLC0i_oibctkl0Vh" << endl;
				cout << "https://www.youtube.com/watch?v=s-ldXjkvats&list=PLWtYZ2ejMVJlUu1rEHLC0i_oibctkl0Vh&index=39" << endl;
				cout << "https://www.youtube.com/watch?v=SMrsNBsZwk0&index=40&list=PLWtYZ2ejMVJlUu1rEHLC0i_oibctkl0Vh" << endl;
				system("pause>null");
				system("cls");
				break; }

				}
			} while (opcion5 != 0);

			break;


		}

		case 5:
		{
			cout << "Bienvenido al soporte de Geekend" << endl;
			cout << "Te adjuntamos el correo oficial donde puedes hablarnos para solucionar todas tus dudas" << endl;
			cout << "geekendinc@gmail.com" << endl;
			cout << "Proximamente se habilitara la plataforma para convivir con la comunidad." << endl;
			system("pause>null");
			system("cls");
			break;
		}

		}
	}

	while (opcion2 != 0);




	_getwch();
}

void programar()
{
	cout << "Bienvenido al lenguaje de programacion." << endl;
	system("pause>null");
	cout << "" << endl;
	cout << "Si buscamos una descripcion en pocas palabras sobre que es programar, encontraremos frases como: " << endl;
	system("pause>null");
	cout << "" << endl;
	cout << "-Crear software usando un lenguaje de programacion" << endl;
	cout << "" << endl;
	cout << "-Darle instrucciones al ordenador" << endl;
	cout << "" << endl;
	cout << "-Explicarle al ordenador como hacer algo." << endl;
	cout << "" << endl;
	system("pause>null");
	cout << "Este es un curso practico y creemos que es mejor que vayas descubriendo en que consiste programar, realizando precisamente esa actividad. En esta seccion de introduccion hablaremos de forma breve sobre algunos conceptos esenciales, algo asi como el <abc> que nos permita comenzar a andar." << endl;
	cout << "" << endl;
	system("pause>null");
	cout << "* Algoritmos, programas y lenguajes de programacion" << endl;
	system("pause>null");
	cout << "" << endl;
	cout << "Para ayudar a entender la programacion a un nivel basico se suele utilizar similes, como las instrucciones de montaje de un mueble o una receta de cocina. En ellas explicamos como realizar algo a traves de una serie de pasos detallados. Por ejemplo, al escribir una receta, primero hemos tenido que descomponer mentalmente el proceso  de cocinar un plato en una serie de tareas con un orden logico:" << endl;
	cout << "" << endl;
	system("pause>null");
	cout << "Limpiar el pescado." << endl << "Echarle dos pizcas de sal" << endl << "Picar 20 gr. de cebolla" << endl << "Calentar 2 cucharas de aceite en una sarten" << endl << "Dorar la cebolla" << endl << "etc…" << endl;
	cout << "" << endl;
	system("pause>null");
	cout << "Luego escribiremos esos pasos. Podria ser en español, en ingles o cualquier otro idioma, pero las instrucciones seguiran siendo las mismas." << endl;
	system("pause>null");
	cout << "" << endl;
	cout << "Pues bien, al desglose de un proceso en pasos detallados y ordenados le denominamos algoritmo y el fichero donde transcribimos estas instrucciones usando un lenguaje de programacion concreto (c++) para que pueda ser ejecutado por un ordenador, le llamamos programa (*)." << endl;
	cout << "" << endl;
	system("pause>null");
	cout << "La sintaxis de estos lenguajes de programacion es bastante mas simple que nuestros idiomas y utilizan un vocabulario y un conjunto de reglas mucho mas reducido. Eso si, son muy estrictas y debemos seguirlas a rajatabla para que el ordenador pueda interpretarlas sin que produzca un error." << endl;
	cout << "" << endl;
	system("pause>null");
	cout << "En resumen, estos programas son un conjunto de sentencias escritas en un lenguaje de programacion que le dicen al ordenador que tareas debe realizar y en que orden, a traves de una serie de instrucciones que detallan completamente ese proceso sin problemas." << endl;
	cout << "" << endl;
	system("pause>null");
	cout << "NOTA." << endl;
	cout << "" << endl;
	cout << "" << endl;
	system("pause>null");
	cout << "En un compilado, como C++, debemos previamente convertir el fichero de texto a una <traducción> mediante un programa llamado compilador. Ese fichero resultante es el que se ejecutara en el ordenador." << endl;
	system("pause>null");
	system("cls");
}

void variables()
{
	cout << "BIENVENIDO A LA CLASE DE VARIABLES. " << endl;
	cout << "" << endl;
	system("pause>null");
	cout << "Que es una variable?" << endl;
	system("pause>null");
	cout << "Una variable es un objeto que puede cambiar su valor durante la ejecucuion." << endl << " *siempre tiene que der declarada*" << endl;
	cout << "Para nombrar las variables utilizamos los identificadores:" << endl;
	system("pause>null");
	cout << "Que son los identificadores?" << endl;
	system("pause>null");
	cout << "Son los tipos de daros con los que declaramos las variables" << endl << "Existen tantos tipos de datos como de variables" << endl;
	system("pause>null");
	cout << "DATOS SIMPLES:" << endl;
	cout << "" << endl;
	system("pause>null");
	cout << "-Ocupan solo una casilla de memoria." << endl << "-Solo pueden ocupar un valor,caracter." << endl;
	system("pause>null");
	cout << "Tipos de datos simples: " << endl;
	system("pause>null");
	cout << "Pueden ser enteros(int). son utilizados para representar numeros enteros,positivos o negativos." << "ejemplos: 2,3,-2,-4" << endl;
	cout << "Pueden ser reales (float). Son utilizados para representar numeros reales, positivos, negativos,fracciones y decimales." << "ejemplos: 1,-3,1.5, 1/5" << endl;
	cout << "Tambien existen de tipos logicos. Se utilizan para representar valores lógicos o booleanos. Son datos que solo pueden tomar dos valores: verdadero o falso" << endl;
	cout << "De misma forma pueden ser caracteres (string, char). Se utilizan para declarar letras MAYUSCULAS y minusculas (no son las mismas), numeros entre el 0 y 9 y caracteres especiales como ser guiones, ateriscos (-,_,*,etc)" << endl;
	cout << "" << endl;
	system("pause>null");
	cout << "Datos complejos o estructurados." << endl;
	cout << "" << endl;
	system("pause>null");
	cout << "Tiene varios componentes, cada uno de estos componentes puede ser a su vez un dato simple." << endl;
	cout << "Con un identificador se hace referencia a un grupo de celdas de memoria, es decir, se usa un único identificador para un conjunto de valores. Pueden ser los vectores o matrices." << endl;
	cout << "" << endl;
	system("pause>null");
	cout << "para que sirven las variables?" << endl;
	cout << "" << endl;
	system("pause>null");
	cout << "Sirven para almacenar datos asignados que pueden ser modificados por nuestro programa. Por ejemplo podemos pedir que ingrese el valor de X en la siguiente funcion y=x+2, donde si le asignamos un valor de 5 a X entonces Y tomara el valor de 7." << endl;
	cout << "Si x toma el valor  8, el valor que tomaría y sería 10 (y = 8+2), y así sucesivamente con cualquier numero que asignaramos a x.En definitiva, x o y son solo nombres, una manera de identificar un numero de forma generica, que puede tomar cualquier valor." << endl;
	cout << "Pues bien, las variables en programacion son algo muy parecido, aunque en este caso veremos que no solo pueden contener numeros, sino tambien textos u otro tipo de valores." << endl;
	system("pause>null");
	cout << "Cada vez que el programa va a consultar el valor de la variable para realizar alguna operacion con ella (mostrar su valor en pantalla, realizar un calculo,….) vera el ultimo valor ingresado en esta." << endl;
	cout << "" << endl;
	system("pause>null");
	cout << "Estas listo para la siguiente clase.";
	system("pause>null");
	system("cls");
}

void CursoOperadores()
{
	int	pagina;
	cout << "------------------Bienvenido al curso sobre operadores-------------- " << endl;
	cout << "Para moverse a la pagina que desea escriba la pagina que desee ir, y para salir escriba 0" << endl;
	cin >> pagina;
	do {
		if (pagina == 1)
		{
			cout << " OPERADORES" << endl;
			cout << " El lenguaje C++ incluye todos los operadores de C" << endl;
			cout << " y agrega varios operadores nuevos." << endl;
			cout << " Los operadores especificamente una evaluacion" << endl;
			cout << " que se realizara en uno o mas operandos" << endl;
			cout << " La prioridad del operador operador especifica si," << endl;
			cout << " en una expresion que contiene multiples operadores" << endl;
			cout << " especifica si, en una expresion que contiene" << endl;
			cout << " multiples operadores con la misma precedencia," << endl;
			cout << " un operando se agrupa con el de su izquierda" << endl;
			cout << " o el de su derecha. La siguiente tabla muestra" << endl;
			cout << " la presendencia y la asociatividad de los operadores de C++" << endl;

			cin >> pagina;
		} 	if (pagina == 2) { cout << " EJEMPLO DE OPERADORES (PARTE 1)" << endl; 		cout << " para la variable x (int x;) y la variable y (int y;)" << endl; 		cout << " x++ " << endl; 		cout << " Sumar 1 a la variable x" << endl; 		cout << " x--" << endl; 		cout << " Restar 1 a la variable x" << endl; 		cout << " x < y" << endl; 		cout << " Comparar si x es menor que y" << endl; 		cout << " x <= y" << endl; 		cout << "Comparar si x es menor igual que y" << endl; 		cout << " x > y" << endl; 		cout << "Comparar si x es mayor a y" << endl; 		cin >> pagina; } 	if (pagina == 3) { cout << " EJEMPLO DE OPERADORES (PARTE 2)" << endl; 		cout << " para la variable x (int x;) y la variable y (int y;)" << endl; 		cout << " x => y " << endl; 		cout << " Comparar si x es mayor igual que y" << endl; 		cout << " x == y " << endl; 		cout << " Comparar si x es igual a y" << endl; 		cout << " x != y" << endl; 		cout << " Comparar si x es diferente que y" << endl; 		cout << "" << endl; 		cout << "" << endl; 		cout << "" << endl; 		cout << "" << endl; 		cin >> pagina; }
	} while (pagina != 0);
	system("pause>null");
	system("cls");
}

void CursoBucle()
{
	int pagina;
	cout << "------------------Bienvenido al curso sobre bucles-------------- " << endl;
	cout << "Para moverse a la pagina que desea escriba la pagina que desee ir, y para salir escriba 0" << endl;
	cin >> pagina;
	do {

		if (pagina == 1) { cout << "BUCLES" << endl; 	cout << "Los bucles o también conocidos como ciclos," << endl; 	cout << "son una estructura de control esencial al momento de programar." << endl; 	cout << "Tanto C como C++ y la mayoría de los lenguajes utilizados actualmente," << endl; 	cout << "nos permiten hacer uso de estas estructuras" << endl; 	cout << "Un ciclo o bucle permite repetir una o varias instrucciones" << endl; 	cout << "Cuantas veces lo necesitemos," << endl; 	cout << "por ejemplo, si quisiéramos escribir los números del uno al cien" << endl; 	cout << "no tendría sentido escribir cien líneas mostrando un numero en cada una" << endl; 	cout << "para esto y para muchísimas cosas más, es útil un ciclo" << endl; 	cout << "permitiéndonos hacer una misma tarea en una cantidad de líneas muy pequeña" << endl; 	cout << " y de forma prácticamente automática." << endl; 	cin >> pagina; } if (pagina == 2) { cout << "EJEMPLO DE BUCLES (PARTE 1)" << endl; 	cout << "for(int i = valor inicial; i <= valor final; i = i + paso)" << endl; 	cout << "{" << endl; 	cout << "Bloque de Instrucciones...." << endl; 	cout << "}" << endl; 	cout << "Se caracteriza por que no es necesario" << endl; 	cout << "definir la variable de control antes del bucle" << endl; 	cout << "while(condición de finalización)" << endl; 	cout << "{" << endl; 	cout << " Bloque de Instrucciones...." << endl; 	cout << "}" << endl; 	cout << "Se caracteriza por que puede ejecutarse infinitamente" << endl; 	cin >> pagina; } if (pagina == 3) { cout << "EJEMPLO DE BUCLES (PARTE 2)" << endl; 	cout << "do" << endl; 	cout << "{" << endl; 	cout << "Bloque de Instrucciones...." << endl; 	cout << "}" << endl; 	cout << "while(condición de finalización)" << endl; 	cout << "Se caracteriza por ejecutar siempre el codigo" << endl; 	cout << "por lo menos una vez" << endl; 	cout << "" << endl; 	cout << "" << endl; 	cout << "" << endl; 	cout << "" << endl; 	cin >> pagina; }
	} while (pagina != 0);

	
}


void arreglos()
{
	cout << "Un arreglo es utilizado para almacenar informacion; en vez de declarar multiples variables y almacenar datos individuales se puede declarar un solo arreglo para almacenar todas las variables." << endl;
	cout << "Cuando declares un arreglo especifica el tipo, asi como tambien la cantidad de elementos que tendra." << endl;
	cout << "Ejemplo: " << endl;
	cout << "     int a[5];    " << endl;
	cout << "Esto significa que la variable a fue declarada como un arreglo de 5 valores enteros." << endl;
	cout << "La posicion de los elementos de un arreglo inician desde 0, el segundo elemento se mostrara en la posicion 1 y asi sucesivamente." << endl;
	cout << "Ejemplo: " << endl;
	cout << "       int b[5] = {11,45,62,70,88}" << endl;
	cout << "       b[0]=11     b[1]=45     b[2]=62     b[3]=70     b[4]=88" << endl;
	system("pause>null");
	system("cls");
	cout << "1) Cargar elementos en un vector." << endl;
	cout << "Para poder introducir elementos en un arreglo se utiliza el bucle for. Para poder introducir los elementos se debe primeramente introducir cuantos valores ingresaremos en el arreglo." << endl;
	cout << "Ejemplo: " << endl;
	cout << "       int arreglo[5];" << endl;
	cout << "       for(int i=0;i<5;i++)" << endl;
	cout << "           cin>> arreglo[i];" << endl;
	cout << "En el for la variable i se inicializa en 0 ya que la primer posicion de un arreglo es 0 y se pone de restriccion menor a 5, ya que como inicia en 0 el quinto valor estar en la posicion con el numero 4." << endl;
	system("pause>null");
	system("cls");
	cout << "2) Mostrar un Arreglo." << endl;
	cout << "Para mostrar un arreglo se utiliza un for similar al que usamos para cargar elementos en un arreglo." << endl;
	cout << "Ejemplo: " << endl;
	cout << "       int c[5];" << endl;
	cout << "Asumimos que el arreglo ya ha sido cargado." << endl;
	cout << "       for(int i=0;i<5;i++)" << endl;
	cout << "          cout<< c[i]<<endl;" << endl;
	system("pause>null");
	system("cls");
	cout << "3) Buscar elementos en un arreglo." << endl;
	cout << "Como las distintas operaciones que se realizan con arreglos utilizaremos un for." << endl;
	cout << "Ejemplo: " << endl;
	cout << "       int d[5];" << endl;
	cout << "Asumiendo que el arreglo esta cargado y tenemos declarada una variable que almacena el numero que deseamos buscar." << endl;
	cout << "       int n=3" << endl;
	cout << "Procedemos a hacer la siguiente operacion." << endl;
	cout << "       for(int i=0;i<5;i++)" << endl;
	cout << "           {" << endl;
	cout << "              if(d[i]==n)" << endl;
	cout << "                 cout<<El numero esta en la posicion: <<i<<" << endl;
	cout << "           }" << endl;
	system("pause>null");
	system("cls");
}
void Funcion()
{
	cout << "Bienvenido al curso de funciones en c++" << endl;
	cout << " En esta clase veremos la gran importancia que tienen las funciones en cualquier tipo de programa" << endl;
	cout << "Pero que son las funciones?" << endl;
	cout << "Las funciones son las estructuras mas importantes dentro del lenguaje de programacion. Permiten una programacion estructurada y simplifican la lectura de codigo; pero lo mas importante es que, una funcion sencilla que realiza una tarea bien especifica, puede ser reutilizada con extrema facilidad en cualquier otro programa" << endl;
	cout << "-------------------------------------------------------------------------------------------------------------------" << endl;
	system("pause>null");

	cout << "Por ejemplo si necesitamos un programa que necesite multiples tareas de calculo como: determinantes, calculos trigonometricos, hallar perimetro; el programa principal quedaria demasiado cargado y podria presentar un desorden, que cuando se programa es lo menos que se quiere." << endl;
	cout << "Entonces la solucion son las funciones que se presentan en el siguiente formato." << endl;
	cout << "Debemos tomarlo como un subprograma." << endl;
	system("pause>null");

	cout << "-----------------------------------------------------------------" << endl;
	cout << "Empezamos con un tipo de formato puede ser: int, float, bool, void entre otros; todo depende del contenido de la funcion." << endl;
	cout << "Ejemplo: quiero llamar a una funcion que calcule una suma.";
	cout << " int [NOMBRE_DE_LA_FUNCION](int A, int B ) " << endl;
	cout << " {[CONTENIDO_DE_LA_FUNCION]} " << endl;
	cout << "Lo que se ve al principio del codigo es el formato, en este caso int; seguido del nombre de la funcion que puede ser cualquiera de tu agrado solo recuerda que no debes dejar espacios, luego abrimos parentesis e introducimos alguno varible que queramos utilizar por ejemplo: el (int a) puede ser una variable que deseemos sumar con (int b) siempre declaramos el tipo de la variable seguido del nombre, que no necesariamente tiene que ser la misma que tengamos en el programa principal; cerramos parentesis y abrimos corchetes y trabajamos en la suma, como utilizamos int debemos poner al final return 0 o cualquier valor que queramos retomar. " << endl;
	cout << "Los parametro que tomamos del programa principal no tienen que ser del mismo nombre, es importante utilizar el nombre que pusimos en la funcion en el codigo." << endl;
	system("pause>null");

	cout << "Ejemplo:" << endl;
	cout << "{int a=5; " << endl;
	cout << "int b=6;" << endl;
	cout << "cout<<Suma(a,b);" << endl;
	cout << "getch();}" << endl;
	cout << "-----------------------------------" << endl;
	system("pause>null");

	cout << "//Abajo del programa escribimos el codigo del subprograma." << endl;
	cout << "int Suma( int A, int B)" << endl;
	cout << "{ int suma;" << endl;
	cout << "suma=A+B;" << endl;
	cout << "return suma; }" << endl;
	system("pause>null");

	cout << "Como se ve en el programa principal se llama a la funcion sin el int o cualquier formato en general y las variables de parametro son las misma del programa principal terminando con un ';'. " << endl;
	cout << "En el subprograma se lo declara con el formato y las variables con su tipo de dato como se observa." << endl;
	cout << "El codigo de la funcion se lo hace con la variables que agregamos en la funcion mismo, en retrospectiva podriamos colocar cualquier nombre. Lo que realiza la funcion es que toma el parametro basado en la posicion en que se declara." << endl;
	cout << "Por ultimo luego de hacer el calculo, como estamos trabajando con int agregamos return suma ya que queremos que cuando llamemos a la funcion devuelva la suma directamente; si no lo pusieramos haria el calculo pero no lo mostraria, por eso al llamar a la funcion en el programa principal colocamos 'cout'." << endl;
	system("pause>null");

	cout << "Algo muy importante que debemos saber sobre la funciones son los parametros directos." << endl;
	cout << "Cuando antes declaravamos 'int Suma(int A, int B)." << endl;
	cout << "Ahora podemos declarar el resultado y anclarlo directamente al programa principal; de esta manera. " << endl;
	cout << "int Suma(int A, int B, int &Suma)" << endl;
	cout << "La variable con '&' guardara el valor directamente con la variable que este en la posicion en el programa principal." << endl;
	cout << "Si en el programa principal llamamos a la funcion de esta manera." << endl;
	cout << "Suma (a, b, &suma) " << endl;
	system("pause>null");

	cout << "Entonces suma en el programa principal guardara el valor que le demos en la funcion" << endl;
	cout << "Con esto concluimos la teoria de Funciones." << endl;
	cout << "Puedes practicar con ejercicios en practicas y analizar ejercicios en el apartado de ejercicios" << endl;
	cout << "Gracias!!!" << endl;
	system("pause>null");
	system("cls");
}

void Strings()
{
	cout << "Esta funcion nos pernmite trabajar con caracteres de texto, lo contrario a lo anterior avanzado donde solamente usabamos numeros." << endl;
	cout << "Para poder trabajar con esta libreria primeramente debemos introcucir la libreria correspondiente:" << endl;
	cout << "             #include <string>;" << endl;
	cout << "Para poder introducir una cadena de caracteres en un string se procede de la siguiente manera:" << endl;
	cout << "             string frase;" << endl;
	cout << "             cout<<Ingrese su frase: <<endl;" << endl;
	cout << "             getline(cin,frase);" << endl;
	system("pause>null");

	cout << "Entre las operaciones que podemos realizar con la libreia string tenemos: " << endl;
	cout << "1)Cantidad de Caracteres del string." << endl;
	cout << "Para determinar la cantidad de caracteres se procede de la siguiente manera: " << endl;
	cout << "        int longitud;" << endl;
	cout << "        string frase;" << endl;
	cout << "        longitud = frase.length();" << endl;
	system("pause>null");

	cout << "2)Comparar 2 strings." << endl;
	cout << "Para realizar la comparacion se usa la funcion compare." << endl;
	cout << "        string frase, var2;" << endl;
	cout << "        cout<<Ingrese el nombre a buscar.<<endl;" << endl;
	cout << "        getline(cin,var2);" << endl;
	cout << "        if(nombre.compare(var2)==0)" << endl;
	cout << "           cout<< Las frases son iguales.<<endl;" << endl;
	cout << "        else" << endl;
	cout << "           cout<< No son iguales.<<endl;" << endl;
	system("pause>null");

	cout << "3)Sacar parte de un string." << endl;
	cout << "Para realizar esto se usa la funcion substr." << endl;
	cout << "        int longitud, pos;" << endl;
	cout << "        string frase;" << endl;
	cout << "        cout<< Ingrese dede que posicion quiere extraer.<<endl;" << endl;
	cout << "        cin>>pos;" << endl;
	cout << "        longitud = frase.length();" << endl;
	cout << "        cout<< frase.substr(pos,longitud-pos);" << endl;
	system("pause>null");

	cout << "4)Intercambiar string." << endl;
	cout << "Esto se realiza usando la funcion swarp." << endl;
	cout << "        string frase, var2;" << endl;
	cout << "        frase.swarp(var2);" << endl;
	cout << "        cout<<nombre<<endl;" << endl;
	cout << "        cout<<var2<<endl;" << endl;
	cout << "Luego de realizar esto ambas variables habran cambiado sus caracteres." << endl;
	system("pause>null");

	cout << "5)Encontrar Caracteres." << endl;
	cout << "Se realiza utilizando la funcion find." << endl;
	cout << "        int longitud;" << endl;
	cout << "        string var2;" << endl;
	cout << "        cout<<var2.find(a);" << endl;
	cout << "        longitud = var2.lentgh();" << endl;
	cout << "        for(int i=0;i<longitud;i++)" << endl;
	cout << "            if(var2.at(i)==a)" << endl;
	cout << "               cout<<Exsite un espacio en <<i<<endl;" << endl;
	system("pause>null");

	cout << "6)Quitar vocales de un string." << endl;
	cout << "Aplicando los conocimientos adquiridos se procede de la siguiente manera." << endl;
	cout << "        string frase, var2;" << endl;
	cout << "        int longitud, cont=0;" << endl;
	cout << "        var2=frase;" << endl;
	cout << "        longitud = frase.length();" << endl;
	cout << "        for(int i=0;i<longitud;i++)" << endl;
	cout << "            if(frase[i]!='a' && frase[i]!='e' && frase[i]!='i' && frase[i]!='o' && frase[i]!='u')" << endl;
	cout << "               {" << endl;
	cout << "                  var2[cont] = frase[i];" << endl;
	cout << "                  cont++;" << endl;
	cout << "               }" << endl;
	cout << "        cout<<La frase sin vocales es: <<var2<<endl;" << endl;
	system("pause>null");
	system("cls");
}

void Matrices()
{
	cout << "Bienvenidos al curso de matrices en c++" << endl;
	cout << "En esta clase analizaremos que son y como se usan las matrices en ++." << endl;
	cout << "Si ya vieron Arreglos entonces no tendran muchos problemas ya que sige la misma logica. Bueno, comencemos. " << endl;
	cout << "Primero, dejemos claro qué es una matriz. En términos generales, una matriz es una estructura conformada por filas y columnas, idealmente más de dos filas y columnas, de hecho, podemos decir que si una 'matriz' tiene una única fila o una única columna, entonces estamos hablando de un vector y no una matriz como tal." << endl;
	cout << "La intersección de una fila y una columna de la matriz son las casillas y cada una de ellas podrá poseer información, simple o compleja (ya dependera de nuestras necesidades)." << endl;
	system("pause>null");

	cout << "Como se crea una Matriz en C++?" << endl;
	cout << "Declarar una matriz en C++ es muy similar a la de un vector, se deben seguir las mismas normas para declarar una variable pero una vez más con un pequeño cambio en la sintaxis. Primero necesitaremos saber el tipo de los datos que irán al interior de este (números, decimales o cadenas de texto, etc.) necesitamos también, como siempre, un nombre para la matriz y un tamaño máximo tanto para las filas como para las columnas. La sintaxis para declarar una matriz en C++ es la siguiente:" << endl;
	cout << "tipoDato nombreMatriz[filas][columnas];" << endl;
	cout << "Tenemos entonces, como podrás ver, que la sintaxis es casi la misma excepto que hemos añadido un par de corchetes '[]' más esta vez y al interior de éstos debemos poner el número de filas y columnas máximas de la matriz, respectivamente. Veamos un ejemplo en el cual pondré la declaración de varias matrices de diferentes tipos y tamaños en C++." << endl;
	cout << "Declaración de una matriz en C++:" << endl;
	system("pause>null");

	cout << "int Matriz1[10][5];" << endl;
	cout << "float Matriz2[5][10];" << endl;
	cout << "string Matriz3[15][15];" << endl;
	cout << "bool Matriz4[1000][3];" << endl;
	system("pause>null");

	cout << "¿Como inicializar una matriz en C++?" << endl;
	cout << "En cuanto tenemos declarado una matriz, es posible asignarle valores a cada una de sus casillas, evidentemente estos valores deben coincidir con el tipo de dato que le asignamos a dicha matriz" << endl;
	cout << "int Matriz1[2][2] = {{1,2},{3,4}};" << endl;
	cout << "Para realizar ejercicios con matrices mas generales necesitamos crear funciones que carguen nuestra matriz a gusto y darle un tamaño" << endl;
	cout << "Ven a la seccion de practicas de matrices para ver todas las posibilidades y practica en el apartado de practicas" << endl;
	cout << "Gracias!" << endl;
	system("pause>null");
	system("cls");
}




void PracticaVariables()
{
	int opcion;
	cout << "BIENVENIDO A LA SECCION DE EJERCICIOS RESUELTOS DE VARIABLES" << endl;
	cout << "" << endl;
	system("pause>null");
	cout << "te presentaremos 2 tipos de ejercicios resueltos de variables, tu eliges el que mas te llame la atencion." << endl << "ALLA VAMOS!!" << endl;
	system("pause>null");
	cout << "1. variables para el area del triangulo." << endl;
	cout << "2. cambio de variables" << endl;
	cin >> opcion;
	switch (opcion)
	{
	case 1: cout << "#include " << "stdafx.h" << endl << "#include <iostream>" << endl << "#include " << "conio.h" << endl << "using namespace std;" << endl << "void main() {" << endl << "float base, altura, area;" << endl << "cout<<" << "La area de un triangulo" << "<<endl;" << endl << "cout" << "<<" << "Por favor ingrese la base: " << endl << "cin>>base;" << endl << "cout<<" << "Por favor ingrese la altura: " << ";" << endl << "cin>>altura;" << endl << "area = (base*altura)/2;" << endl << "cout<<" << "Su area es: " << "<< area <<endl;" << endl << "getch();" << endl << "}" << endl;
		break;
	case 2:cout << "#include " << "stdafx.h" << endl << "#include <iostream>" << endl << "#include " << "conio.h" << endl << "using namespace std;" << endl << "void main(){" << endl << "int a, b, c;" << endl << "cout<<" << "Por favor ingrese el valor de a: " << ";" << endl << "cin>>a;" << endl << "cout<<" << "Por favor ingrese el valor de b: " << ";" << endl << "cin>>b;" << endl << "c = a;" << endl << "a = b;" << endl << "b = c;" << endl << "cout<<" << "El nuevo valor de a es: " << "<<a<<endl;" << endl << "cout<<" << "El nuevo valor de b es: " << "<<b<<endl;" << endl << "getch();" << endl << "}" << endl;
		break;
	}
	system("pause>null");
	system("cls");
}

void PracticaOperadores()
{
	
		cout << "Bienvenidos al apartado de practicas de funciones en C++" << endl;
		cout << "Para que puedas realizar tus codigos en conjuntos a la clase te dejamos un link de un compilador" << endl;
		cout << "https://www.onlinegdb.com/online_c++_compiler Ingresa y comencemos!" << endl;
		cout << "-----------------------------------------------------------------------------------------------" << endl;

		system("pause>null"); system("cls"); cout << "Para comenzar podemos practicar como funcionan los operadores " << endl; cout << "Primero declaramos una variable que llamaremos x y le asignaremos el valor de 1 ( int x = 1; )." << endl; cout << "a esa variable le colocaremos el operador ++ (x++;)" << endl; cout << "y ahora colocaremos un cout para ver cuanto vale x (cout<<x;)" << endl; cout << "veremos que ahora x vale 2" << endl; cout << "Realizamos el mismo ejercicio con x valiendo 1 y cambiando el operador ++ por el --" << endl; cout << "x terminara valiendo 0, comprobemoslo en el cout" << endl; cout << "Para el operador > creemos 2 variables, una nombrada x con valor de 1 y otra nombrada y con valor de 2" << endl; cout << "Para continuar con las practicas haremos uso de condicionales, asi que se rogaria que se avanzara ese curso primero antes de continuar " << endl; cout << "creando dos variables, una x y otra y, ambas con valor a 0" << endl; cout << "creariamos una condicional if y colocariamos que x es menor a y (if(x < y))" << endl; cout << "el comando que se colocara dentro no se ejecutara, por que tanto x como y son iguales, x no es menor a y" << endl; cout << "para que esto funcione, se colocaria la condicional <= (if( x<= y))" << endl; cout << "la misma logica se cumple con los operadores > y >=" << endl; cout << "Conservando las anteriores dos variables" << endl; cout << "colocariamos una condicional if diciendo si x es diferente a y con la condicional != (if( x != y))" << endl; cout << "los valores no se ejecutaran pues x y y valen lo mismo" << endl; cout << "pero si utilizamos los valores x y y con la condicional ==" << endl; cout << "si funcionaria, pues x y y valen lo mismo" << endl; cout << "En cuestion a los operadores && y ||" << endl; cout << "creamos una condicional if donde colocaremos if(x < 0 && y >10)}" << endl; cout << "el if no se ejecutara, pues ambas condiciones tienen que cumplirse unidas por el and, x es menor que 0, pero y no es mayor que 10" << endl; cout << "si creamos una condicional if donde colocaremos if(x < 0 || y >10)}" << endl; cout << "el if si se ejecutara, pues con el or, basta ccon que una se cumpla para que se ejecute el if, en este caso, con que x sea menor que 0." << endl; cout << "Lo que hacemos es que cuando utilizamos dos 'for' con dos variables diferentes podemos recorrer la matriz de forma ordenada para cargarla o mostrarla." << endl;


}
void PracticaBuclues()
{
	cout << "Bienvenidos al apartado de practicas de funciones en C++" << endl;
	cout << "Para que puedas realizar tus codigos en conjuntos a la clase te dejamos un link de un compilador" << endl;
	cout << "https://www.onlinegdb.com/online_c++_compiler Ingresa y comencemos!" << endl;
	cout << "-----------------------------------------------------------------------------------------------" << endl;

	cout << "Para comenzar podemos practicar como funcionan los bucles " << endl; cout << "Crearemos una variable x que le colocaremos un cin" << endl; cout << "ahora crearemos un bucle for asi: for(int i = 0; i < x; i++)" << endl; cout << "Siguiendo la teoria explicada, sabremos que en el bucle creamos la variable i" << endl; cout << "que el bucle se ejecutara mientras i sea menor a x y que se sumara un uno a i en cada siclo" << endl; cout << "haciendo que el bucle se ejecutara 10 veces" << endl; cout << "dentro del for colocaremos un cout que indique i (cout<<i;)" << endl; cout << "y este nos ira mostrando una secuencia del 0 al 9." << endl;  cout << "Manteniendo la variable x y añadiendo la variable y con valor de 5" << endl; cout << "Ahora crearemos un bucle while { ... }while( x < y );" << endl; cout << "entendiendo la teoria entenderemos que x se ejecutara mientras x sea menor que y" << endl; cout << "pero para que esto no se ejecute infinitas veces ahi que añadirle un sumador que vaya añadiendo de 1 en 1 a x" << endl; cout << "para que x llegue a valer igual o mas que y" << endl; cout << "por ende colocaremos un {x++}while(x<y);" << endl; cout << "ahora haremos el ejemplo del cout para x dentro del while y veremos cuantas veces ejecuta" << endl; cout << "Para el bucle do while realizariamos los mismos pasos que en el ejemplo anterior" << endl; cout << "solo que ahora añadiendo un do al inicio de la llave y cambiaremos de posicion y por x do{...}while(y<x);" << endl; cout << "Este ejecutara siempre 1 vez lo que haya dentro de las llaves" << endl; cout << "y no es menor que x, pero ejecutara 1 vez lo que haya dentro de las llaves aunque el while no se cumpla" << endl;

}

void PracticaArreglos()
{
	cout << "Para iniciar podemos practicar a cargar un arreglo para cualquier tipo de programa que vayamos a realizar." << endl;
	cout << "Primero se procede a declarar el tipo de arreglo y luego declaramos la cantidad de valores que almacenará." << endl;
	cout << "   #include <iostream>" << endl;
	cout << "   #define MAX 100 //Constante para el tamaño del arreglo." << endl;
	cout << "   using namespace std;" << endl;
	cout << "   void main()" << endl;
	cout << "   {" << endl;
	cout << "     int arreglo[MAX], n;" << endl;
	cout << "     cout<<'Ingrese la cantidad de valores que ingresará.'" << endl;
	cout << "     cin>>n;" << endl;
	cout << "     for(int i=0;i<n;i++)" << endl;
	cout << "         {" << endl;
	cout << "           cout<<'Arreglo['<<i<<']= ';" << endl;
	cout << "           cin>>arreglo[i];" << endl;
	cout << "         }" << endl;
	cout << "//Para mostrar en la pantalla los valores de un arreglo ya cargado se usa la misma logica que se usa para cargar, solo que qesta vez sin usar un cin." << endl;
	cout << "     for(int j=0;j<n;j++)" << endl;
	cout << "         cout<<'Arreglo['<<j<<']= '<<arreglo[j]<<endl;" << endl;
	cout << "     getch();" << endl;
	cout << "     }" << endl;
	cout << "-------------------------------------------------------------------------------------------" << endl;
	cout << "En la seccion donde se procede a cargar el arreglo se inicia el contador en o ya que la primera posicion en un arreglo tiene el numero 0." << endl;
	cout << "Y en las lineas de codigo donde se da la orden de mostrar el arreglo se procede con la misma logica que al cargar, solamente sin la utilizacion del cin ya que nuestro arreglo ya esta cargado." << endl;
	cout << "Los arreglos pueden ser utilizados para almacenar desde datos contables hasta núemeros telefónicos que luego necesitemos." << endl;
	cout << "Puedes ver ejercicios para mejorar mas en la seccion de ejercicios de curso." << endl;
	cout << "Gracias por practicar con nosotros." << endl;
}


void PracticaFuncion()
{
	cout << "Bienvenido al apartado de practicas de funciones en C++" << endl;
	cout << "Para que puedas realizar tus codigos en conjuntos a la clase te dejamos un link de un compilador" << endl;
	cout << "https://www.onlinegdb.com/online_c++_compiler   Ingresa y comencemos!" << endl;
	cout << "---------------------------------------------------------------------" << endl;
	cout << "Para comenzar te dejo esto para ir mas rapido y puedos correr el subprograma" << endl;
	cout << "#include <iostream> #include <math.h>  using namespace std;  void main(){ [FUNCION]  getch();  }//Dale sus respesctivos espacios y comenzamos//" << endl;

	system("pause>null");


	cout << "Haremos una funcion para calcular un numero('x') elevado a otro('y') " << endl;
	cout << "Entonces comezamos con: int Potencia(int x, int y)" << endl;
	cout << "{int pot;" << endl;
	cout << "pot=pow(x,y);" << endl;
	cout << "return pot;}" << endl;
	cout << "Ahora en el programa principal llama a la funcion con los parametros del mismo" << endl;
	cout << "Prueba realizar multiples calculos con este formato" << endl;
	cout << "---------------------------------------------------------------------------------------" << endl;

	system("pause>null");


	cout << "Ahora realicemos uno con parametro directo" << endl;
	cout << "El parametro directo nos sirve mucho ya que normalmente una funcion solo puede devolver un valor pero si utilizamos los parametros directos podemos obtener cualquier cantidad de salidas" << endl;
	cout << "Para probrarlo realizaremos un sub programa que tomando los valores 'x' e 'y' calculemos la division entre ellos y el calculo de elevar 'x' a 'y'" << endl;
	cout << "float DP(int x, int y, float &div, float &pot)" << endl;
	cout << "{ div=x/y;" << endl;
	cout << "pot=pow(x,y)}" << endl;
	cout << "Pruba en tu programa principal al mostrar con cout los valores de esas variables y comprueba el resultado" << endl;

	system("pause>null");
	system("cls");


}

void PracticaMatriz()
{
	cout << "Bienvenidos al apartado de practicas de funciones en C++" << endl;
	cout << "Para que puedas realizar tus codigos en conjuntos a la clase te dejamos un link de un compilador" << endl;
	cout << "https://www.onlinegdb.com/online_c++_compiler   Ingresa y comencemos!" << endl;
	cout << "-----------------------------------------------------------------------------------------------" << endl;

	system("pause>null");


	cout << "Para comenzar podemos practicar como cargar una matriz para poder trabajar cualquier tipo programa. " << endl;
	cout << "Primero declaramos las matrices con constantes como tamaño y las cargamos de la siguiente manera." << endl;
	cout << "#include <iostream>" << endl;
	cout << "#define FILA 20   //constantes para el tamaño de las matrices" << endl;
	cout << "#define COLUM 20" << endl;
	cout << "                                                " << endl;
	cout << "using namespace std; " << endl;
	cout << "void main()" << endl;
	cout << "{int Matriz[FILA][COLUM];" << endl;
	cout << "int n, m;" << endl;
	cout << "cout<<'Ingrese tamaño de la matriz( fila y columna)';" << endl;
	cout << "cin>>n>>m; " << endl;
	cout << "for(int i=0;i<n;i++)" << endl;
	cout << " {for(int j=0;j<m;j++)" << endl;
	cout << "   {cin>>Matriz[i][j];}" << endl;
	cout << " }" << endl;
	cout << "//Ahora mostraremos los valores con esta codigo que sigue la misma logica//" << endl;
	cout << "for(int k=0;k<n;k++)" << endl;
	cout << " {for(int l=0;l<m;l++)" << endl;
	cout << "   {cout<<Matriz[i][j];}" << endl;
	cout << " }" << endl;
	cout << "getch();" << endl;
	cout << "}" << endl;
	system("pause>null");

	cout << "-------------------------------------------------------------------------------------------" << endl;
	cout << "Lo que hacemos es que cuando utilizamos dos 'for' con dos variables diferentes podemos recorrer la matriz de forma ordenada para cargarla o mostrarla." << endl;
	cout << "De modo que la primera variable se situa con la 'i'en la fila'0' y el parametro 'j' para recorriendo esa fila. Todo esto tomando en cuanta el tamaño de las filas y columnas de la matriz y usandolas en los 'fors' para saber cuantas veces debemos recorrer la fila o la columna " << endl;
	cout << "Podemos darle muchas utilidades a una matriz como: listas de multiples datos, registros contables entre otros" << endl;
	cout << "Puedes ver ejercicios para mejorar mas en la seccion de ejercicios de curso" << endl;
	cout << "Gracias por practicar con nosotros" << endl;

	system("pause>null");
	system("cls");

}

void PracticaString()
{
	cout << "Para poder utilizar la libreria string junto a todas las posiblidades que nos ofrece primeramente debemos ser capaces de poder cargar una variable con caracteres." << endl;
	cout << "Primeramente se debe declarar una variable de tipo string donde se almacenaran los caracteres a ingresar." << endl;
	cout << "   #include <iostream>" << endl;
	cout << "   #include <string>" << endl;
	cout << "   using namespace std;" << endl;
	cout << "   void main()" << endl;
	cout << "   {" << endl;
	cout << "     string frase;" << endl;
	cout << "     cout<<'Ingrese su frase'." << endl;
	cout << "     getline(cin,frase); //En los string se usa getline ya que necesitamos todo lo escrito en esa linea de codigo, entre el parentesis ponemos cin, seguidamente se pone el nombre de la variable que almacenara los caracteres" << endl;
	cout << "     //Luego de haber cargado la variable podemos mostrarla en la pantalla." << endl;
	cout << "     cout<<frase;" << endl;
	cout << "     getch();" << endl;
	cout << "   }" << endl;
	cout << "-------------------------------------------------------------------------------------------" << endl;
	cout << "Al declarar una variable que almacenara caracteres se la debe nombrar string." << endl;
	cout << "Para poder cargar la variable de tipo string se usa el getline(), dado que si solamente pusieramos cin almacenaria los datos hasta donde pongamos un espacio." << endl;
	cout << "En cambio con el getline, todo lo que esta escrito en la linea de codigo se almacena en la variable. Dentro del parentesis del getline se poen cin,(nombre de nuestra variable)." << endl;
	cout << "El manejo de datos tipo string nos sirve para poder almacenar contactos, direcciones, etc." << endl;
}

